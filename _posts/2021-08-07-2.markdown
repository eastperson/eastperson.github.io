---
layout: post
title:  "[jekyll] Github.io 블로그 만들기"
date:   2021-08-07 07:25:00 +0900
categories: blog
---
<h2>[jekyll] Github.io 블로그 만들기</h2>
<br/>
<p>
<img src="https://user-images.githubusercontent.com/66561524/128624433-7c2702a5-5fe1-4727-ba8a-987a9d681f39.png">
<br/><br/>
나는 다양한 플랫폼에서 블로그 글을 작성하고 있다. 네이버 View 노출을  위한 네이버 블로그, 구글 SEO를 위한 tistory, 노트하기 편한 에버노트, 많은 글을 웹상에서 관리하기 쉬운 additor, 가독성이 높은 UI를 제공해주는 notion이 있다.
</p>
<p>
이렇게 너무 많은 블로그를 사용하다보니 글도 분산되어있고 애초에 목표로 하던 SEO도 잘 되지 않는다. 글또를 시작하면서 개인 블로그를 운영하고 싶다는 생각이 들었는데 마침 스터디장께서 추천한 Github.io 블로그를 시작해보려고 한다. (참고로 window 기준으로 작성되었다)
</p>
<h4>순서</h4>
<ol>
<a href="#repository"><li>repository 생성</li></a>
<a href="#ruby"><li>루비 프로그램 설치</li></a>
<a href="#ruby"><li>지킬 설치</li></a>
<a href="#ruby"><li>로컬 지킬 테스트</li></a>
<a href="#post"><li>포스트 작성</li></a>
<a href="#theme"><li>테마 적용</li></a>
<a href="#deploy"><li>깃허브 배포</li></a>
<a href="#GA"><li>구글 애널리틱스</li></a>
<a href="#search-console"><li>구글 서치 콘솔</li></a>
</ol>
<hr>
<h3>Overview</h3>
<p>
<img src="https://user-images.githubusercontent.com/66561524/128624493-bc7e35ee-70f7-470b-8749-889edb7d62d2.png"/>

개인 블로그를 운영하기 위해서는 정적 사이트가 필요하다. 따로 서버와 연동이 없이 html을 배포해서 사용하는 것이다. 하지만 블로그 글을 위해서 html을 하나하나 작성하면서 css로 레이아웃을 잡는 것을 원하지 않은 사람이 많다. 더군다나 글 관리도 쉽지 않다. 이 문제를 해결하기 위해 나는 정적 사이트 생성기인 jekyll을 사용하기로 결정했다. jekyll을 사용한 git hub 블로그의 장점은 다음과 같다.
<ol>
<li>마크다운 언어를 사용하기 때문에 사용법이 비교적 간단하다.</li>
<li>db가 필요 없다.</li>
<li>Git을 이용하여 백업과 복원이 쉽다.</li>
<li>다양한 테마와 플러그인, 편집기 등이 있어서 정보를 얻기 쉽고 확장성을 고려할 수 있다.</li>
<li>Github 계정만 있다면 무료 호스팅을 지원받을 수 있다.</li>
<li>구글 상위 노출을 위한 개발적인 요소를 임의로 설정할 수 있다.</li>
</ol>
</p>
<p>
Jekyll은 정적 사이트 빌더(Static Website Builder)이다. Github 공동 설립자가 만든 기술로 Liquid 언어로 만들었다. 템플릿과 템플릿 구성요소, 인라인 코드, 마크다운과 같은 동적인 구성요소를 활용하여 자동으로 정적인 웹페이지를 만들어지는 파싱 엔진이라고 할 수 있다.
</p>

<h3 id="repository">Github Repository 생성</h3>
<p>
기존 리포지토리를 생성하는 방식으로 만들어준다. name은 도메인명을 정하는 것인데, 보통 github username으로 주로 설정한다.
</p>
<img src="https://user-images.githubusercontent.com/66561524/128624501-7f1d47f2-9c1c-450d-a022-9f9f80f5a790.png">
<img src="https://user-images.githubusercontent.com/66561524/128624507-abcc0742-f1ce-45d2-b860-135e52b6b45e.png"/>
<p>
그리고 정적 페이지를 발행하고 있는지 setting에 가서 확인하면 된다.
</p>
<p>
<strong>블로그 주소</strong><br>
https://{username}.github.io/
</p>
<h3 id="ruby">Ruby & Jekyll 설치</h3>
<p>
지킬(jekyll)은 루비로 제작되어있기 때문에 루비를 먼저 설치해야 한다.  루비는 인터프리터 형식으로 실행되는 언어이다.
</p>
<p>
우선 <a href="https://rubyinstaller.org/downloads/">루비를 다운받고 설치</a>를 한다. 그리고 'Start Command Prompt with Ruby'를 실행시킨다. 이후에 아래와 같은 커맨드를 입력해준다.
</p>

```
# 루비 버전 확인
ruby -v

# 지킬 설치
gem install jekyll
gem install minima
gem install bundler
gem install jekyll-feed
gem install tzinfo-data

# 로컬 디렉토리 설정
cd {directory}

# 깃 클론
git clone {https://github.com/{username}.github.io.git}

# 지킬 설치
jekyll new ./
bundle install

# 지킬 실행
bundle exec jekyll serve
```

<p>
이렇게 설치후 실행을 시켜
</p>
<img src="https://user-images.githubusercontent.com/66561524/128624515-d5b0dd64-4233-42ae-89ce-7799bacff3e8.png"/>
<p>
위와 같은 화면이 나타나는지 확인한다. 그리고 <code>http://localhost:4000</code>에서 자동으로 작성된 index를 확인할 수 있다.
</p>

<h3 id="post">Jekyll 포스팅 방법</h3>
<p>
지킬의 정적 파일이 생성되는 원리는 다음과 같다.
</p>
<img src="https://user-images.githubusercontent.com/66561524/128624520-6032d2bc-0067-452c-bc97-57d89b3d2938.png">
<p>
처음 생성된 디렉토리는 위와 같다. 여기 .gitignore를 확인해보면
</p>

```
_site
.sass-cache
.jekyll-cache
.jekyll-metadata
vendor
```

<p>
이렇게 작성되어있다. 깃허브 리포지토리에 올라오는 파일과 실제로 생성되는 파일은 다르다. _post에 작성된 글은 jekyll이 구동되면 _stie라는 디렉토리에 html 파일이 작성이 된다. 기본 틀은 정적파일로 제작이 되어있고 우리는 그 테마에 맞게 _config에 기본 설정을 해주고 _post에 글을 작성하면 된다.
</p>

<p>
<strong>_config.yml</strong>
</p>

```
# Welcome to Jekyll!
#
# This config file is meant for settings that affect your whole blog, values
# which you are expected to set up once and rarely edit after that. If you find
# yourself editing this file very often, consider using Jekyll's data files
# feature for the data you need to update frequently.
#
# For technical reasons, this file is *NOT* reloaded automatically when you use
# 'bundle exec jekyll serve'. If you change this file, please restart the server process.
#
# If you need help with YAML syntax, here are some quick references for you:
# https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml
# https://learnxinyminutes.com/docs/yaml/
#
# Site settings
# These are used to personalize your new site. If you look in the HTML files,
# you will see them accessed via {{ site.title }}, {{ site.email }}, and so on.
# You can create any custom variable you would like, and they will be accessible
# in the templates via {{ site.myvariable }}.

title: Your awesome title
email: your-email@example.com
description: >- # this means to ignore newlines until "baseurl:"
  Write an awesome description for your new site here. You can edit this
  line in _config.yml. It will appear in your document head meta (for
  Google search results) and in your feed.xml site description.
baseurl: "" # the subpath of your site, e.g. /blog
url: "" # the base hostname & protocol for your site, e.g. http://example.com
twitter_username: jekyllrb
github_username:  jekyll

# Build settings
theme: minima
plugins:
  - jekyll-feed

# Exclude from processing.
# The following items will not be processed, by default.
# Any item listed under the `exclude:` key here will be automatically added to
# the internal "default list".
#
# Excluded items can be processed by explicitly listing the directories or
# their entries' file path in the `include:` list.
#
# exclude:
#   - .sass-cache/
#   - .jekyll-cache/
#   - gemfiles/
#   - Gemfile
#   - Gemfile.lock
#   - node_modules/
#   - vendor/bundle/
#   - vendor/cache/
#   - vendor/gems/
#   - vendor/ruby/
```

<p>
여기서 해당하는 정보를 입력하면 블로그 홈에 적용이 된다. 또한 _post에는 <br>
<br>
{yyyy}-{MM}-{dd}-{title}.markdown<br>
파일로 설정이 되어있다. 각각 채워준뒤 파일을 열어보면
</p>
<br>

```
---
layout: post
title:  {"title"}
date:   2021-07-31 09:11:57 +0900
categories: {cat1} {cat2}
---
```
<p>
이런 글과 함께 아래는 공백이 있다. 아래에는 본인이 원하는 방식으로 markdown글을 채워나가면 된다. 카테고리는 site안에 디렉토리를 생성해준다. 공백을 두면 디렉토리가 생긴다. 위의 경우  지킬을 실행시키면 <code>/root/_stie/cat1/cat2/2021/07/31/title.html</code> 파일이 생긴다고 보면된다.
</p>
<p>
원하는 글을 작성하고 위의 방법으로 지킬을 구동시켜 <code>http://localhost:4000</code>에서 글을 확인해보면 된다. 참고로 마크다운 글쓰기는 적절한 에디터를 사용하면 된다.본인은 atom을 사용하고 있다.
</p>

<h3 id="theme">테마 적용</h3>
<p>
테마는 jekyll theme를 적용하면 수많은 깃허브 주소를 확인할 수 있다. 본인은 <a href="https://github.com/samarsault/plainwhite-jekyll">https://github.com/samarsault/plainwhite-jekyll</a> 이 테마를 적용시키려 한다
</p>

<p>해당 주소를 들어가서 </p>
<img src="https://user-images.githubusercontent.com/66561524/128624526-430d96aa-5076-4483-b65a-06a0adbb24d5.png">

<p>
Download ZIP을 클릭해준다. 그리고 그 폴더에 들어가서 전체 파일을 선택한뒤 복사해서 <code>git clone</code>을 한 로컬 디렉토리에서 붙여넣기를 해준다. 그리고 모든 파일을 overwrite 해준다.
</p>

```
bundle install
bundle exec jekyll serve
```

<p>
루비를 통해 위의 커맨드를 실행시켜준다. 그리고 로컬에서 블로그를 다시 확인해주면 된다. 참고로 <code>_config.yml</code>은 다시 작성해주자. (baseurl도 설정해주자) 포스트 작성은 이전과 동일하며 원하는 내용을 커스터마이징이하기 편하다. 참고로 대부분의 테마는 SEO 관련 설정을 편하게 제공해주기 때문에 SEO를 공부하면 상위노출이 더욱 쉬워진다.
</p>

<h3 id="deploy">배포</h3>
<p>
마지막으로 <code>git push</code>를 해주면 처음에 설정했던 주소에서 확인할 수 있다. (적용되는데 몇분이 걸리는 것 같다.) 원리는 잘 모르겠는데 바로 적용안되더라도 조금 기달려보자.
</p>

<h3 id="GA">구글 애널리틱스 연동</h3>
<p>
구글 애널리틱스는 블로그에 유입된 트래픽을 분석하는 툴이다. jekyll은 정적인 페이지를 제공하기 때문에 트래픽 유입 데이터를 쌓는데는 이렇게 분석 툴을 사용하는 것이 알맞을 것이다. 뿐만 아니라 GA는 숙련도에 따라서 효용가치가 높을뿐만 아니라 연동 방법이 간단하니 권장을 해드리고 싶은 도구다. 사실 데이터가 없으면 블로그 관리가 딱히 재미가 없다. 무슨 포스트가 인기가 있었는지 정도는 궁금할 것이다.
</p>
<p>
<a href="https://analytics.google.com">Google Analytics</a>에 접속하여 회원가입을 해준다. 이후 블로그 url을 복사해서 설정을 해준다.
</p>
<br>
<img src="https://user-images.githubusercontent.com/66561524/129470612-73279fd6-d11e-4d28-ad74-613c43a091e9.png"/>
<p>
연동을 완료하면 다음과 같은 화면이 나타난다. 중간에 있는 '새로운 온페이지 태그 추가'를 클릭하여 태그를 확인하고 복사한다. 이후에는 테마마다 조금씩 차이가 있을 수 있다.
</p>
<p>
루트 디렉토리에 있는 _include 폴더에서 google-analytics.html을 생성해준다. 안의 내용 중간에 코드를 삽입한다.
</p>

```
{% raw %}
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-59DP1SECTE"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-59DP1SECTE');
</script>
{% endraw %}
```

그리고 _include 폴더에 있는 head.html에 google-analytics.html을 삽입한다.
<br>

```
{% include google-analytics.html %}
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<link href="https://fonts.googleapis.com/css?family=Merriweather:300|Raleway:400,700" rel="stylesheet">
<link rel="stylesheet" href="{{ "/assets/css/style.css" | relative_url }}">

<title>{{ page.title | default: site.title }}</title>
{% seo %}
{% if site.plainwhite.dark_mode %}
<script type="text/javascript" src="{{ "/assets/js/darkmode.js" | relative_url }}"></script>
{% endif %}
```

<p>
연동은 이렇게 끝이다. 이제 자유롭게 사용하면 된다.
</p>

<img src="https://user-images.githubusercontent.com/66561524/129469892-beabc80b-352c-447e-be46-67471e079ac1.png"/>

<h3 id="search-console">구글 서치콘솔 연동</h3>
<h4>SEO?</h4>
<p>
글을 열심히 작성했을 때 그 글을 아무도 읽지 않아줬다는 사실만큼 슬픈 일이 없다. 아무리 공들인 글이라도 사람들의 유입이 없는 게시글은 점차 수명이 줄어든다. 네이버 블로그, 브런치, 티스토리는 기본적으로 SEO(Search Engine Optimization, 검색엔진최적화)를 제공하기 때문에 게시글이 자연스럽게 노출이 되었을 수 있다. 하지만 jekyll은 수동으로 설정해야할 필요가 있다.
</p>
<p>
SEO는 다양한 방법이 있다. 구글은 정해진 조건에 따라 웹 페이지에 점수를 매기는데, 사이트 점수를 제외하면 70~80%가 tech 쪽 이슈라고 보면 된다. <strong>사이트 점수</strong>는 그동안의 트래픽을 누적해서 점수로 기록하며 점수가 높은 사이트에서 해당 웹 페이지를 올리거나 백링크(backlink)를 걸어 점수를 높일 수 있다. 백링크로 인해 바이럴 효과를 기대할 수 있다. <strong>tech</strong>는 기본적인 SEO 환경 제공, 웹 사이트 로딩 속도, meta 태그 사용 여부, url 키워드 및 길이 등 구글에서 제공한 기준을 바탕으로 개발이 되었는지를 주로 검사한다. 나머지 20~30%는 <strong>콘텐츠</strong>에 기반한다. 콘텐츠의 제목, 노출별 클릭, 콘텐츠 길이, 이탈율, 평균 콘텐츠 이용 시간 등의 기준이 있다.
</p>
<p>
해외에서는 검색엔진 최적화가 검색엔진 마케팅만큼의 유입을 가져오기 때문에 기업별로 많은 연구를 하지만 국내에서는 네이버의 영향이 커서 그런지 아직 미미하다. 하지만 국내 이용자들의 구글 사용 빈도가 높아지면서 점점 SEO의 중요성이 커지고 있다. SEO의 가장 첫 시작은 웹 페이지 점수를 분석하는 구글의 크롤러에게 이 사이트의 존재를 알리는 것이다. 크롤러가 인식할 수 있는 페이지임을 알려주는 <u>robots.txt</u>와 사이트내 포스트의 주소를 맵핑해주는 <u>sitemap.xml</u>을 작성해주자.
</p>
<h4>구글 서치 콘솔</h4>
<p>
<a href="https://www.google.com/webmasters/tools/siteoverview?hl=ko">Google Search Consle</a>은 구글 검색을 통해서 들어온 키워드에 대한 인사이트를 제공해주는 도구이다. 어떤 키워드로 포스트가 노출이 되는지 확인이 될 수 있다. 개발자에게는 앞서 말한 sitemap을 수동으로 등록하여 구글 검색에 노출을 바로 등록하는 방법이다. 서치콘솔로 등록을 해주지 않으면 구글 크롤러가 전세계에 있는 콘텐츠를 뒤적거리다가 우리 콘텐를 빨리 만나기를 기다릴 수밖에 없을 것이다.
</p>
<p>
구글 서치 콘솔로 접속하고 url을 입력하여 등록을 해준다. 이후 root directory로 이동하여 robots.txt를 작성해준다.
</p>

```
User-agent: *
Allow: /

Sitemap: https://eastperson.github.io/sitemap.xml
```
사이트맵도 작성해준다.

```
<pre><code>
---
layout : null
---
{%-if site.plainwhite.sitemap -%}
    <?xml version="1.0" encoding="UTF-8"?>
    <urlset
        xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
                http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
        <url>
            <loc>{{ site.url }}</loc>
	    <lastmod>{{ 'now' | date_to_xmlschema }}</lastmod>
            <priority>1.00</priority>
        </url>
        {%- for post in site.posts -%}
            <url>
                <loc>{{ site.url }}{{ post.url }}</loc>
                <lastmod>{{ post.date | date_to_xmlschema }}</lastmod>
                <changefreq>weekly</changefreq>
                <priority>0.80</priority>
            </url>
        {%- endfor -%}
    </urlset>    
{%- endif -%}
</code></pre>
```

이제 깃허브에 다시 푸시해주고 난 후 아래에 제출해주고 며칠 기다리면 된다.

<img src="https://user-images.githubusercontent.com/66561524/129470934-37c58b41-cc21-41ef-849a-b1727a35b5fb.png"/>

<h3>Reference</h3>
<ul>
<li><a href="https://shryu8902.github.io/_posts/2018-06-22-jekyll-on-windows/">https://shryu8902.github.io/_posts/2018-06-22-jekyll-on-windows/</a></li>
<li><a href="https://jetalog.net/86">https://jetalog.net/86</a></li>
<li><a href="https://zeddios.tistory.com/1223">https://zeddios.tistory.com/1223</a></li>
<li><a href="https://daehopark.tistory.com/entry/Jekyll-Google-Analytics-%EC%A0%81%EC%9A%A9">https://daehopark.tistory.com/entry/Jekyll-Google-Analytics-%EC%A0%81%EC%9A%A9</a></li>
<li><a href="https://moon9342.github.io/jekyll-sitemap">https://moon9342.github.io/jekyll-sitemap</a></li>
<li><a href="https://developers.google.com/search/docs/beginner/get-started">https://developers.google.com/search/docs/beginner/get-started</a></li>
</ul>

<hr>
<h4>여담</h4>
<p>
github.io 블로그를 만든 방법을 작성해보았다. 이후에 Google Analytics, Google Search Console을 연동했고, 이후에 Travis CI와 SEO를 적용하려고 한다. 이 과정들을 기록하고 있다. (2021.08.07)
</p>
