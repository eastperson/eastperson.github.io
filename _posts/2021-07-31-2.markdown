---
layout: post
title:  "[jekyll] Github.io 블로그 만들기"
date:   2021-08-07 07:25:00 +0900
categories: blog
---
<h2>[jekyll] Github.io 블로그 만들기</h2>
<br/>
<p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/de924a74-7986-4be4-96c6-c120680571ac/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T222756Z&X-Amz-Expires=86400&X-Amz-Signature=c948cecdc3d03dd502ea99d940e30f92baa30fa78f4c1d5105a3012ca6e14c1c&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22">
<br/><br/>
나는 블로그를 매우 다양한 플랫폼을 사용한다. 콘텐츠 마케터 시절 네이버 View 탭에 상위 노출 전략을 사용하기 위한 네이버 블로그, 구글 SEO에 대한 커스터마이징을 비개발자도 할 수 있는 tistory, 데스크탑 앱이 있어 노트하기 편한 에버노트, 많은 글을 웹상에서 관리하기 쉬운 additor, 가장 편하게 가독성이 높은 UI를 제공해주는 notion이 있다.
</p>
<p>
이렇게 너무 많은 블로그를 사용하다보니 글도 분산되어있고 애초에 목표로 하던 SEO도 잘 되지 않는다. 그런데 글또를 시작하면서 스터디장분이 추천한 깃허브 블로그를 시작해보려고 한다.
</p>
<h4>순서</h4>
<ol>
<a href="#repository"><li>repository 생성</li></a>
<a href="#ruby"><li>루비 프로그램 설치</li></a>
<a href="#ruby"><li>지킬 설치</li></a>
<a href="#ruby"><li>로컬 지킬 테스트</li></a>
<a href="#post"><li>포스트 작성</li></a>
<a href="#theme"><li>테마 적용</li></a>
<a href="#deploy"><li>깃허브 배포</li></a>
</ol>
<hr>
<h3>Overview</h3>
<p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0faf8589-5feb-4006-9162-ae3305b7c7ac/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T223036Z&X-Amz-Expires=86400&X-Amz-Signature=c9a0c8bb923081025d8575192fdc757c37be28ba9373f54c0934adbac9d01cdf&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22"/>

지킬의 장점은 다음과 같습니다.
<ol>
<li>마크다운 언어를 사용하기 때문에 사용법이 비교적 간단합니다.</li>
<li>정적 사이트 생성기라서 db가 필요 없습니다.</li>
<li>Git을 이용하여 백업과 복원이 쉽습니다.</li>
<li>다양한 테마와 플러그인, 편집기 등이 있어서 정보를 얻기 쉽고 확장성을 고려할 수 있습니다.</li>
<li>Github 계정만 있다면 무료 호스팅을 지원받을 수 있습니다.</li>
</ol>
</p>
<p>
Jekyll은 정적 사이트 빌더(Static Website Builder)이다. Github 공동 설립자가 만든 기술로 Liquid 언어로 만들었다. 템플릿과 템플릿 구성요소, 인라인 코드, 마크다운과 같은 동적인 구성요소를 활용하여 자동으로 정적인 웹페이지를 만들어지는 파싱 엔진이라고 할 수 있다.
</p>

<h3 id="repository">Github Repository 생성</h3>
<p>
기존 리포지토리를 생성하는 방식으로 만들어준다. name은 도메인명을 정하느 것인데, 보통 github username으로 주로 설정한다.
</p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a41c95e9-f93d-41c3-9c80-ee2384510a29/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T223406Z&X-Amz-Expires=86400&X-Amz-Signature=e462c19bbe544864d5b3b696a9aa80f5dad9352ffb85854f92fe6c00712a0ff1&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22">
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/ac970c37-9b03-489d-af04-1627bdf20cbc/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T223427Z&X-Amz-Expires=86400&X-Amz-Signature=b5bc05882a0c8fe0b411a00ca2245f07a557e07121eb2b033abec9f8cb8d2f10&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22"/>
<p>
그리고 정적 페이지를 발행하고 있는지 setting에 가서 확인하면 된다.
</p>
<p>
블로그 주소<br>
https://{username}.github.io/
</p>
<br/>
<h3 id="ruby">Ruby Program & Jekyll 설치</h3>
<p>
지킬(jekyll)은 루비로 제작되어있기 때문에 루비를 먼저 설치해야 한다.  루비는 인터프리터 형식으로 실행되는 언어이다.
</p>
<p>
우선 본인은 집에서 윈도우를 사용하기 때문에 윈도우를 기준으로 작성하겠다. 우선 루비를 설치해준다. 루비를 다운받고 설치를 한다. 그리고 'Start Command Prompt with Ruby'를 실행시킨다.
</p>

```
# 루비 버전 확인
ruby -v

# 지킬 설치
gem install jekyll
gem install minima
gem install bundler
gem install jekyll-feed
gem install tzinfo-data

# 로컬 디렉토리 설정
cd {directory}

# 깃 클론
git clone {https://github.com/eastperson/{username}.github.io.git}

# 지킬 설치
jekyll new ./
bundle install

# 지킬 실행
bundle exec jekyll serve
```

<p>
이렇게 설치후 실행을 시켜
</p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/27742370-62a9-44e0-9303-c109f6f4be85/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T224027Z&X-Amz-Expires=86400&X-Amz-Signature=b77b093cd1e4eadc7eb65fba6e1c4d108af113e86bec9e59edc096d63ce5d680&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22"/>
<p>
위와 같은 화면이 나타나는지 확인한다. 그리고 http://localhost:4000에서 자동으로 작성된 index를 확인할 수 있다.
</p>

<h3 id="post">Jekyll 포스팅 방법</h3>
<p>
지킬의 정적 파일이 생성되는 원리는 다음과 같다.
</p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/982b00b4-12a1-4dbb-b219-09fff20b7985/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T224124Z&X-Amz-Expires=86400&X-Amz-Signature=baf5967610b2a9c8f13141df1e74b81deab66d4390ee343a0f32bd9d0963b665&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22">
<p>
처음 생성된 디렉토리는 위와 같다. 여기 .gitignore를 확인해보면
</p>

```
_site
.sass-cache
.jekyll-cache
.jekyll-metadata
vendor
```

<p>
이렇게 작성되어있다. 깃허브 리포지토리에 올라오는 파일과 실제로 생성되는 파일은 다르다. _post에 작성된 글은 jekyll이 구동되면 _stie라는 디렉토리에 html 파일이 작성이 된다. 기본 틀은 정적파일로 제작이 되어있고 우리는 그 테마에 맞게 _config에 기본 설정을 해주고 _post에 글을 작성하면 된다.
</p>

<p>
_config.yml
</p>

```
# Welcome to Jekyll!
#
# This config file is meant for settings that affect your whole blog, values
# which you are expected to set up once and rarely edit after that. If you find
# yourself editing this file very often, consider using Jekyll's data files
# feature for the data you need to update frequently.
#
# For technical reasons, this file is *NOT* reloaded automatically when you use
# 'bundle exec jekyll serve'. If you change this file, please restart the server process.
#
# If you need help with YAML syntax, here are some quick references for you:
# https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml
# https://learnxinyminutes.com/docs/yaml/
#
# Site settings
# These are used to personalize your new site. If you look in the HTML files,
# you will see them accessed via {{ site.title }}, {{ site.email }}, and so on.
# You can create any custom variable you would like, and they will be accessible
# in the templates via {{ site.myvariable }}.

title: Your awesome title
email: your-email@example.com
description: >- # this means to ignore newlines until "baseurl:"
  Write an awesome description for your new site here. You can edit this
  line in _config.yml. It will appear in your document head meta (for
  Google search results) and in your feed.xml site description.
baseurl: "" # the subpath of your site, e.g. /blog
url: "" # the base hostname & protocol for your site, e.g. http://example.com
twitter_username: jekyllrb
github_username:  jekyll

# Build settings
theme: minima
plugins:
  - jekyll-feed

# Exclude from processing.
# The following items will not be processed, by default.
# Any item listed under the `exclude:` key here will be automatically added to
# the internal "default list".
#
# Excluded items can be processed by explicitly listing the directories or
# their entries' file path in the `include:` list.
#
# exclude:
#   - .sass-cache/
#   - .jekyll-cache/
#   - gemfiles/
#   - Gemfile
#   - Gemfile.lock
#   - node_modules/
#   - vendor/bundle/
#   - vendor/cache/
#   - vendor/gems/
#   - vendor/ruby/
```

<p>
여기서 해당하는 정보를 입력하면 블로그 홈에 적용이 된다. 또한 _post에는 <br>
<br>
{yyyy}-{MM}-{dd}-{title}.markdown<br>
파일로 설정이 되어있다. 각각 채워준뒤 파일을 열어보면
</p>
<br>

```
---
layout: post
title:  {"title"}
date:   2021-07-31 09:11:57 +0900
categories: {cat1} {cat2}
---
```
<p>
이런 글과 함께 아래는 공백이 있다. 아래에는 본인이 원하는 방식으로 markdown글을 채워나가면 된다. 카테고리는 site안에 디렉토리를 생성해준다. 공백을 두면 디렉토리가 생긴다. 위의 경우  지킬을 실행시키면 <code>/root/_stie/cat1/cat2/2021/07/31/title.html</code> 파일이 생긴다고 보면된다.
</p>
<p>
원하는 글을 작성하고 위의 방법으로 지킬을 구동시켜  http://localhost:4000에서 글을 확인해보면 된다. 참고로 마크다운 글쓰기는 적절한 에디터를 사용하면 된다. vscode가 아마 편할 듯하다. 나는 atom을 사용하고 있다.
</p>

<h3 id="theme">테마 적용</h3>
<p>
테마는 jekyll theme를 적용하면 수많은 깃허브 주소를 확인할 수 있다. 본인은 <a href="https://github.com/samarsault/plainwhite-jekyll">https://github.com/samarsault/plainwhite-jekyll</a> 이 테마를 적용시키려 한다
</p>

<p>해당 주소를 들어가서 </p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0b7486d1-fc73-496d-a850-f279710a6ab4/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210806%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210806T224457Z&X-Amz-Expires=86400&X-Amz-Signature=ef206ac920e4c5a5f6de18557a2f7c5cb461c99de1709fe9d5f32728914b641d&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22">

<p>
Download ZIP을 클릭해준다. 그리고 그 폴더에 들어가서 전체 파일을 선택한뒤 복사해서 git clone을 한 로컬 디렉토리에서 붙여넣기를 해준다. 그리고 모든 파일을 overwriter해준다.
</p>

```
bundle install
bundle exec jekyll serve
```

<p>
루비를 통해 위의 커맨드를 실행시켜준다. 그리고 로컬에서 블로그를 다시 확인해주면 된다. 참고로 _config.yml은 다시 작성해주자. (baseurl도 설정해주자) 포스트 작성은 이전과 동일하며 원하는 내용을 커스터마이징이하기 편하다. 참고로 대부분의 테마는 SEO 관련 설정을 편하게 제공해주기 때문에 SEO를 공부하면 상위노출이 더욱 쉬워진다.
</p>

<h3 id="deploy">배포</h3>
<p>
마지막으로 깃푸시를 해주면 처음에 설정했던 주소에서 확인할 수 있다. (적용되는데 몇분이 걸리는 것 같다.) 원리는 잘 모르겠는데 바로 적용안되더라도 조금 기달려보자.
</p>

<h3>Reference</h3>
<ul>
<li><a href="https://shryu8902.github.io/_posts/2018-06-22-jekyll-on-windows/">https://shryu8902.github.io/_posts/2018-06-22-jekyll-on-windows/</a></li>
<li><a href="https://jetalog.net/86">https://jetalog.net/86</a></li>
<li><a href="https://zeddios.tistory.com/1223">https://zeddios.tistory.com/1223</a></li>
</ul>


<hr>
<h4>여담</h4>
<p>
github.io 블로그를 만든 방법을 작성해보았다. 이후에 Google Analytics, Google Search Console을 연동했고, 이후에 Travis CI와 SEO를 적용하려고 한다. 이 과정들을 기록하고 있다. (2021.08.07)
</p>
